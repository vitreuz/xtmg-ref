// generated by table-mocks; DO NOT EDIT

package fake

import (
	"sync"

	"github.com/vitreuz/xtmg-ref/srv/database"
)

type Resource struct {
	appendByFilterMethod map[int]ResourceAppendByFilterMethod
	appendByFilterMutex  sync.RWMutex
	AppendByFilterCalls  int
}

type ResourceAppendByFilterMethod struct {
	Data      []byte
	Filters   []database.Filter
	ErrResult error
}

func NewResource() *Resource {
	fake := &Resource{}
	fake.appendByFilterMethod = make(map[int]ResourceAppendByFilterMethod)

	return fake
}

func (fake *Resource) AppendByFilter(data []byte, filters ...database.Filter) (errResult error) {
	fake.appendByFilterMutex.Lock()
	fakeMethod := fake.appendByFilterMethod[fake.AppendByFilterCalls]
	fakeMethod.Data = data
	fakeMethod.Filters = filters
	fake.appendByFilterMethod[fake.AppendByFilterCalls] = fakeMethod
	fake.AppendByFilterCalls++
	fake.appendByFilterMutex.Unlock()

	return fakeMethod.ErrResult
}

func (fake *Resource) AppendByFilterReturns(errResult error) *Resource {
	fake.appendByFilterMutex.Lock()
	fakeMethod := fake.appendByFilterMethod[0]
	fakeMethod.ErrResult = errResult
	fake.appendByFilterMethod[0] = fakeMethod
	fake.appendByFilterMutex.Unlock()

	return fake
}

func (fake *Resource) AppendByFilterGetArgs() (data []byte, filters []database.Filter) {
	fake.appendByFilterMutex.RLock()
	data = fake.appendByFilterMethod[0].Data
	filters = fake.appendByFilterMethod[0].Filters
	fake.appendByFilterMutex.RUnlock()

	return data, filters
}

type ResourceAppendByFilterFunc func(ResourceAppendByFilterMethod) ResourceAppendByFilterMethod

func (fake *Resource) AppendByFilterForCall(call int, fns ...ResourceAppendByFilterFunc) *Resource {
	fake.appendByFilterMutex.Lock()
	for _, fn := range fns {
		fakeMethod := fake.appendByFilterMethod[call]
		fake.appendByFilterMethod[call] = fn(fakeMethod)
	}
	fake.appendByFilterMutex.Unlock()

	return fake
}
