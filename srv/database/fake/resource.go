// generated by table-mocks; DO NOT EDIT

package fake

import (
	"github.com/vitreuz/xtmg-ref/srv/models"
	"sync"
)

type Resource struct {
	filterDecodeMethod map[int]ResourceFilterDecodeMethod
	filterDecodeMutex  sync.RWMutex
	FilterDecodeCalls  int
}

type ResourceFilterDecodeMethod struct {
	Data      []byte
	Filters   []models.Filter
	ErrResult error
}

type ResourceFilterDecodeCall struct {
	call int
	fake *Resource
}

func NewResource() *Resource {
	fake := &Resource{}
	fake.filterDecodeMethod = make(map[int]ResourceFilterDecodeMethod)

	return fake
}

func (fake *Resource) FilterDecode(data []byte, filters ...models.Filter) (errResult error) {
	fake.filterDecodeMutex.Lock()
	fakeMethod := fake.filterDecodeMethod[fake.FilterDecodeCalls]
	fakeMethod.Data = data
	fakeMethod.Filters = filters
	fake.filterDecodeMethod[fake.FilterDecodeCalls] = fakeMethod
	fake.FilterDecodeCalls++
	fake.filterDecodeMutex.Unlock()

	return fakeMethod.ErrResult
}

func (fake *Resource) FilterDecodeReturns(errResult error) *Resource {
	fake.filterDecodeMutex.Lock()
	fakeMethod := fake.filterDecodeMethod[0]
	fakeMethod.ErrResult = errResult
	fake.filterDecodeMethod[0] = fakeMethod
	fake.filterDecodeMutex.Unlock()

	return fake
}

func (fake *Resource) FilterDecodeGetArgs() (data []byte, filters []models.Filter) {
	fake.filterDecodeMutex.RLock()
	data = fake.filterDecodeMethod[0].Data
	filters = fake.filterDecodeMethod[0].Filters
	fake.filterDecodeMutex.RUnlock()

	return data, filters
}

func (fake *Resource) FilterDecodeForCall(call int) *ResourceFilterDecodeCall {
	fake.filterDecodeMutex.Lock()

	return &ResourceFilterDecodeCall{call: call, fake: fake}
}

func (on *ResourceFilterDecodeCall) Returns(errResult error) *Resource {
	fakeMethod := on.fake.filterDecodeMethod[on.call]
	fakeMethod.ErrResult = errResult
	on.fake.filterDecodeMethod[on.call] = fakeMethod
	on.fake.filterDecodeMutex.Unlock()

	return on.fake
}

func (on *ResourceFilterDecodeCall) GetArgs() (data []byte, filters []models.Filter, called bool) {
	_, called = on.fake.filterDecodeMethod[on.call]
	data = on.fake.filterDecodeMethod[on.call].Data
	filters = on.fake.filterDecodeMethod[on.call].Filters
	on.fake.filterDecodeMutex.Unlock()

	return data, filters, called
}

