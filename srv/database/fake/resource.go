// generated by table-mocks; DO NOT EDIT

package fake

import (
	"sync"

	"github.com/vitreuz/xtmg-ref/srv/database"
)

type Resource struct {
	decodeMethod map[int]ResourceDecodeMethod
	decodeMutex  sync.RWMutex
	DecodeCalls  int

	filterDecodeMethod map[int]ResourceFilterDecodeMethod
	filterDecodeMutex  sync.RWMutex
	FilterDecodeCalls  int
}

type ResourceDecodeMethod struct {
	Data      []byte
	ErrResult error
}

type ResourceFilterDecodeMethod struct {
	Data      []byte
	Filters   []database.Filter
	ErrResult error
}

func NewResource() *Resource {
	fake := &Resource{}
	fake.decodeMethod = make(map[int]ResourceDecodeMethod)
	fake.filterDecodeMethod = make(map[int]ResourceFilterDecodeMethod)

	return fake
}

func (fake *Resource) Decode(data []byte) (errResult error) {
	fake.decodeMutex.Lock()
	fakeMethod := fake.decodeMethod[fake.DecodeCalls]
	fakeMethod.Data = data
	fake.decodeMethod[fake.DecodeCalls] = fakeMethod
	fake.DecodeCalls++
	fake.decodeMutex.Unlock()

	return fakeMethod.ErrResult
}

func (fake *Resource) DecodeReturns(errResult error) *Resource {
	fake.decodeMutex.Lock()
	fakeMethod := fake.decodeMethod[0]
	fakeMethod.ErrResult = errResult
	fake.decodeMethod[0] = fakeMethod
	fake.decodeMutex.Unlock()

	return fake
}

func (fake *Resource) DecodeGetArgs() (data []byte) {
	fake.decodeMutex.RLock()
	data = fake.decodeMethod[0].Data
	fake.decodeMutex.RUnlock()

	return data
}

type ResourceDecodeFunc func(ResourceDecodeMethod) ResourceDecodeMethod

func (fake *Resource) DecodeForCall(call int, fns ...ResourceDecodeFunc) *Resource {
	fake.decodeMutex.Lock()
	for _, fn := range fns {
		fakeMethod := fake.decodeMethod[call]
		fake.decodeMethod[call] = fn(fakeMethod)
	}
	fake.decodeMutex.Unlock()

	return fake
}

func (fake *Resource) FilterDecode(data []byte, filters ...database.Filter) (errResult error) {
	fake.filterDecodeMutex.Lock()
	fakeMethod := fake.filterDecodeMethod[fake.FilterDecodeCalls]
	fakeMethod.Data = data
	fakeMethod.Filters = filters
	fake.filterDecodeMethod[fake.FilterDecodeCalls] = fakeMethod
	fake.FilterDecodeCalls++
	fake.filterDecodeMutex.Unlock()

	return fakeMethod.ErrResult
}

func (fake *Resource) FilterDecodeReturns(errResult error) *Resource {
	fake.filterDecodeMutex.Lock()
	fakeMethod := fake.filterDecodeMethod[0]
	fakeMethod.ErrResult = errResult
	fake.filterDecodeMethod[0] = fakeMethod
	fake.filterDecodeMutex.Unlock()

	return fake
}

func (fake *Resource) FilterDecodeGetArgs() (data []byte, filters []database.Filter) {
	fake.filterDecodeMutex.RLock()
	data = fake.filterDecodeMethod[0].Data
	filters = fake.filterDecodeMethod[0].Filters
	fake.filterDecodeMutex.RUnlock()

	return data, filters
}

type ResourceFilterDecodeFunc func(ResourceFilterDecodeMethod) ResourceFilterDecodeMethod

func (fake *Resource) FilterDecodeForCall(call int, fns ...ResourceFilterDecodeFunc) *Resource {
	fake.filterDecodeMutex.Lock()
	for _, fn := range fns {
		fakeMethod := fake.filterDecodeMethod[call]
		fake.filterDecodeMethod[call] = fn(fakeMethod)
	}
	fake.filterDecodeMutex.Unlock()

	return fake
}
