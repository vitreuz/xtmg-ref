// Code generated by counterfeiter. DO NOT EDIT.
package routes_v1fakes

import (
	"sync"

	"github.com/vitreuz/xtmg-ref/srv/models"
	"github.com/vitreuz/xtmg-ref/srv/router/routes_v1"
)

type FakeShipActor struct {
	ListShipsStub        func([]models.Ship, ...string) ([]models.Ship, error)
	listShipsMutex       sync.RWMutex
	listShipsArgsForCall []struct {
		arg1 []models.Ship
		arg2 []string
	}
	listShipsReturns struct {
		result1 []models.Ship
		result2 error
	}
	listShipsReturnsOnCall map[int]struct {
		result1 []models.Ship
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeShipActor) ListShips(arg1 []models.Ship, arg2 ...string) ([]models.Ship, error) {
	var arg1Copy []models.Ship
	if arg1 != nil {
		arg1Copy = make([]models.Ship, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.listShipsMutex.Lock()
	ret, specificReturn := fake.listShipsReturnsOnCall[len(fake.listShipsArgsForCall)]
	fake.listShipsArgsForCall = append(fake.listShipsArgsForCall, struct {
		arg1 []models.Ship
		arg2 []string
	}{arg1Copy, arg2})
	fake.recordInvocation("ListShips", []interface{}{arg1Copy, arg2})
	fake.listShipsMutex.Unlock()
	if fake.ListShipsStub != nil {
		return fake.ListShipsStub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listShipsReturns.result1, fake.listShipsReturns.result2
}

func (fake *FakeShipActor) ListShipsCallCount() int {
	fake.listShipsMutex.RLock()
	defer fake.listShipsMutex.RUnlock()
	return len(fake.listShipsArgsForCall)
}

func (fake *FakeShipActor) ListShipsArgsForCall(i int) ([]models.Ship, []string) {
	fake.listShipsMutex.RLock()
	defer fake.listShipsMutex.RUnlock()
	return fake.listShipsArgsForCall[i].arg1, fake.listShipsArgsForCall[i].arg2
}

func (fake *FakeShipActor) ListShipsReturns(result1 []models.Ship, result2 error) {
	fake.ListShipsStub = nil
	fake.listShipsReturns = struct {
		result1 []models.Ship
		result2 error
	}{result1, result2}
}

func (fake *FakeShipActor) ListShipsReturnsOnCall(i int, result1 []models.Ship, result2 error) {
	fake.ListShipsStub = nil
	if fake.listShipsReturnsOnCall == nil {
		fake.listShipsReturnsOnCall = make(map[int]struct {
			result1 []models.Ship
			result2 error
		})
	}
	fake.listShipsReturnsOnCall[i] = struct {
		result1 []models.Ship
		result2 error
	}{result1, result2}
}

func (fake *FakeShipActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.listShipsMutex.RLock()
	defer fake.listShipsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeShipActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v1.ShipActor = new(FakeShipActor)
