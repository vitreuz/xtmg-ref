// Code generated by counterfeiter. DO NOT EDIT.
package routes_v1fakes

import (
	"sync"

	"github.com/vitreuz/xtmg-ref/srv/models"
	"github.com/vitreuz/xtmg-ref/srv/router/routes_v1"
)

type FakeShipDatabase struct {
	ReadShipsStub        func(filters ...models.Filter) (ships []models.Ship, err error)
	readShipsMutex       sync.RWMutex
	readShipsArgsForCall []struct {
		filters []models.Filter
	}
	readShipsReturns struct {
		result1 []models.Ship
		result2 error
	}
	readShipsReturnsOnCall map[int]struct {
		result1 []models.Ship
		result2 error
	}
	ReadShipsByFactionStub        func(string, ...models.Filter) ([]models.Ship, error)
	readShipsByFactionMutex       sync.RWMutex
	readShipsByFactionArgsForCall []struct {
		arg1 string
		arg2 []models.Filter
	}
	readShipsByFactionReturns struct {
		result1 []models.Ship
		result2 error
	}
	readShipsByFactionReturnsOnCall map[int]struct {
		result1 []models.Ship
		result2 error
	}
	ReadShipByXWSStub        func(string) (models.Ship, error)
	readShipByXWSMutex       sync.RWMutex
	readShipByXWSArgsForCall []struct {
		arg1 string
	}
	readShipByXWSReturns struct {
		result1 models.Ship
		result2 error
	}
	readShipByXWSReturnsOnCall map[int]struct {
		result1 models.Ship
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeShipDatabase) ReadShips(filters ...models.Filter) (ships []models.Ship, err error) {
	fake.readShipsMutex.Lock()
	ret, specificReturn := fake.readShipsReturnsOnCall[len(fake.readShipsArgsForCall)]
	fake.readShipsArgsForCall = append(fake.readShipsArgsForCall, struct {
		filters []models.Filter
	}{filters})
	fake.recordInvocation("ReadShips", []interface{}{filters})
	fake.readShipsMutex.Unlock()
	if fake.ReadShipsStub != nil {
		return fake.ReadShipsStub(filters...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.readShipsReturns.result1, fake.readShipsReturns.result2
}

func (fake *FakeShipDatabase) ReadShipsCallCount() int {
	fake.readShipsMutex.RLock()
	defer fake.readShipsMutex.RUnlock()
	return len(fake.readShipsArgsForCall)
}

func (fake *FakeShipDatabase) ReadShipsArgsForCall(i int) []models.Filter {
	fake.readShipsMutex.RLock()
	defer fake.readShipsMutex.RUnlock()
	return fake.readShipsArgsForCall[i].filters
}

func (fake *FakeShipDatabase) ReadShipsReturns(result1 []models.Ship, result2 error) {
	fake.ReadShipsStub = nil
	fake.readShipsReturns = struct {
		result1 []models.Ship
		result2 error
	}{result1, result2}
}

func (fake *FakeShipDatabase) ReadShipsReturnsOnCall(i int, result1 []models.Ship, result2 error) {
	fake.ReadShipsStub = nil
	if fake.readShipsReturnsOnCall == nil {
		fake.readShipsReturnsOnCall = make(map[int]struct {
			result1 []models.Ship
			result2 error
		})
	}
	fake.readShipsReturnsOnCall[i] = struct {
		result1 []models.Ship
		result2 error
	}{result1, result2}
}

func (fake *FakeShipDatabase) ReadShipsByFaction(arg1 string, arg2 ...models.Filter) ([]models.Ship, error) {
	fake.readShipsByFactionMutex.Lock()
	ret, specificReturn := fake.readShipsByFactionReturnsOnCall[len(fake.readShipsByFactionArgsForCall)]
	fake.readShipsByFactionArgsForCall = append(fake.readShipsByFactionArgsForCall, struct {
		arg1 string
		arg2 []models.Filter
	}{arg1, arg2})
	fake.recordInvocation("ReadShipsByFaction", []interface{}{arg1, arg2})
	fake.readShipsByFactionMutex.Unlock()
	if fake.ReadShipsByFactionStub != nil {
		return fake.ReadShipsByFactionStub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.readShipsByFactionReturns.result1, fake.readShipsByFactionReturns.result2
}

func (fake *FakeShipDatabase) ReadShipsByFactionCallCount() int {
	fake.readShipsByFactionMutex.RLock()
	defer fake.readShipsByFactionMutex.RUnlock()
	return len(fake.readShipsByFactionArgsForCall)
}

func (fake *FakeShipDatabase) ReadShipsByFactionArgsForCall(i int) (string, []models.Filter) {
	fake.readShipsByFactionMutex.RLock()
	defer fake.readShipsByFactionMutex.RUnlock()
	return fake.readShipsByFactionArgsForCall[i].arg1, fake.readShipsByFactionArgsForCall[i].arg2
}

func (fake *FakeShipDatabase) ReadShipsByFactionReturns(result1 []models.Ship, result2 error) {
	fake.ReadShipsByFactionStub = nil
	fake.readShipsByFactionReturns = struct {
		result1 []models.Ship
		result2 error
	}{result1, result2}
}

func (fake *FakeShipDatabase) ReadShipsByFactionReturnsOnCall(i int, result1 []models.Ship, result2 error) {
	fake.ReadShipsByFactionStub = nil
	if fake.readShipsByFactionReturnsOnCall == nil {
		fake.readShipsByFactionReturnsOnCall = make(map[int]struct {
			result1 []models.Ship
			result2 error
		})
	}
	fake.readShipsByFactionReturnsOnCall[i] = struct {
		result1 []models.Ship
		result2 error
	}{result1, result2}
}

func (fake *FakeShipDatabase) ReadShipByXWS(arg1 string) (models.Ship, error) {
	fake.readShipByXWSMutex.Lock()
	ret, specificReturn := fake.readShipByXWSReturnsOnCall[len(fake.readShipByXWSArgsForCall)]
	fake.readShipByXWSArgsForCall = append(fake.readShipByXWSArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("ReadShipByXWS", []interface{}{arg1})
	fake.readShipByXWSMutex.Unlock()
	if fake.ReadShipByXWSStub != nil {
		return fake.ReadShipByXWSStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.readShipByXWSReturns.result1, fake.readShipByXWSReturns.result2
}

func (fake *FakeShipDatabase) ReadShipByXWSCallCount() int {
	fake.readShipByXWSMutex.RLock()
	defer fake.readShipByXWSMutex.RUnlock()
	return len(fake.readShipByXWSArgsForCall)
}

func (fake *FakeShipDatabase) ReadShipByXWSArgsForCall(i int) string {
	fake.readShipByXWSMutex.RLock()
	defer fake.readShipByXWSMutex.RUnlock()
	return fake.readShipByXWSArgsForCall[i].arg1
}

func (fake *FakeShipDatabase) ReadShipByXWSReturns(result1 models.Ship, result2 error) {
	fake.ReadShipByXWSStub = nil
	fake.readShipByXWSReturns = struct {
		result1 models.Ship
		result2 error
	}{result1, result2}
}

func (fake *FakeShipDatabase) ReadShipByXWSReturnsOnCall(i int, result1 models.Ship, result2 error) {
	fake.ReadShipByXWSStub = nil
	if fake.readShipByXWSReturnsOnCall == nil {
		fake.readShipByXWSReturnsOnCall = make(map[int]struct {
			result1 models.Ship
			result2 error
		})
	}
	fake.readShipByXWSReturnsOnCall[i] = struct {
		result1 models.Ship
		result2 error
	}{result1, result2}
}

func (fake *FakeShipDatabase) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.readShipsMutex.RLock()
	defer fake.readShipsMutex.RUnlock()
	fake.readShipsByFactionMutex.RLock()
	defer fake.readShipsByFactionMutex.RUnlock()
	fake.readShipByXWSMutex.RLock()
	defer fake.readShipByXWSMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeShipDatabase) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v1.ShipDatabase = new(FakeShipDatabase)
